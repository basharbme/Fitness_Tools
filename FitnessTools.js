/*

USE AND MAINTENANCE 

HTML:
1. Input parameter foo is <input id="foo"></input>
2. Input parameter foo is enclosed in <div id="fooBox"></div>, with any text labels (probably <p>)
3. Dropdown for tool selection <select id="pickTool"> is required
4. Tool option "bar" within "pickTool" is <option value="bar">
5. <button id="runCalculation" type="button" > is required

JAVASCRIPT:
1. Every parameter must be listed in fullInputList AND inputObject
2. Any additional tools must be listed in fullToolList AND inputListsByTool
3. Any answers generated by tools should be saved/added to the answerObject
4. Any new tool calculations should be added to runToolCalculations()
5. All tool calculations should put actual answers in answerObject, and return true for success and false for fail


*/

// This requires two event listeners: one to select the tool, and one to calculate
// (Third event listener to clear values is optional but I need to make sure nonexistent element doesn't break script)

document.getElementById("runCalculation").addEventListener("click",doFunction);
document.getElementById("pickTool").addEventListener("change", preFunction);
document.getElementById("clearValues").addEventListener("click", clearAllValues);


// These two functions control the flow 

function preFunction() {
   var e = document.getElementById("pickTool");
   var thisTool=e.options[e.selectedIndex].value;
   // document.getElementById("testParagraph").innerHTML=thisTool;   // for testing purposes only
   // setTheInnerHTML("theAnswer","");
   var toolInputs=inputListsByTool[thisTool];

   hideAllFormElements();
   showTheseBoxElements(toolInputs);
   hideAllTextElements("pre_");
   hideAllTextElements("post_");
   hideAllTextElements("ans_");
   hideAllTextElements("pic_");
   var pE = "pre_" + thisTool;
   showThisElement(pE); // shows pre-test information (instructions, scope, etc.)
}

function doFunction() {
   var e = document.getElementById("pickTool");
   var thisTool=e.options[e.selectedIndex].value;
   var isInputValid = getInputValues(thisTool);
 
   // this function will stop if the input is bad.
   if( !isInputValid) { 
      document.getElementById("testParagraph").innerHTML="Error"; // temporary warning
      return false; 
   }

   // runs the actual calculation;
   var thisAnswer = runToolCalculation(thisTool);

   // catches case where calculation failed due to invalid input
   if( !thisAnswer) {
      return false;
   }  

   var pE = "post_" + thisTool;
   showThisElement(pE);

   writeAnswer(thisTool); // writes answers from answerObject to <p id=ans_(thisTool)">
   var aE = "ans_" + thisTool;
   showThisElement(aE);

   setMyMarker(thisTool);
   // findMarkerLeftPix(answerObject.BMI, 20, 50, 500, 17, 42);
   // setMarkerLeftPix("BMIMark", answerObject.BMI, 20, 50, 500, 17, 42);  // temporary!
   var pE = "pic_" + thisTool;
   showThisBlockElement(pE);


}



// These object are for tool names and properties, to be updated as needed

var fullInputList = ["feet", "inches", "pounds", "age", "waist", "hips", "iliac"];

var inputObject = {
   feet : 0,
   inches : 0,
   pounds : 0,
   age : 0,
   waist : 0,
   hips : 0,
   iliac : 0
}

var fullToolList = ["none", "BMI", "HRR", "bodyFatMale", "bodyFatFemale", "WHR"];

var inputListsByTool = {
   none: [],
   BMI : ["feet","inches","pounds"],
   HRR : ["age"],
   bodyFatMale : ["pounds", "iliac", "hips", "waist"],
   bodyFatFemale : ["waist", "hips", "feet", "inches", "age"],
   WHR : ["waist", "hips"]
};

var answerObject = {
   BMI: 0,
   HRMax: 0,
   HRR1: [0,0],
   HRR2: [0,0],
   HRR3: [0,0],
   bodyFatMale: 0,
   bodyFatFemale: 0,
   WHR: 0
}

function clearInputObject() {
   var len=fullInputList.length;
   for(i=0;i<len;i++) {
      inputObject[fullInputList[i]]=0;
   }
}


// This clears values. Not a terribly important function, but a clear button is nice.

function clearAllValues() {
   var len=fullInputList.length;
   var thisInput;
   for(i=0; i<len; i++) {
      thisInput=fullInputList[i];
      setTheValue(thisInput,"");
   }
}

// These (generalized) functions hide/show/set elements by ID. They are robust to absent elements.

function hideThisElement(elementID) {
   var elementExists = document.getElementById(elementID); // make sure element actually exists on page
   if( !elementExists) {}
   else {
      elementExists.style.display="none";
   }
}

function showThisElement(elementID) {
   var elementExists = document.getElementById(elementID); // make sure element actually exists on page
   if( !elementExists) {}
   else {
      elementExists.style.display="inline";
   }
}


function showThisBlockElement(elementID) {
   var elementExists = document.getElementById(elementID); // make sure element actually exists on page
   if( !elementExists) {}
   else {
      elementExists.style.display="block";
   }
}

function setTheInnerHTML(elementID,theNewText) {
   var elementExists = document.getElementById(elementID); // make sure element actually exists on page
   if( !elementExists) {}
   else {
      elementExists.innerHTML=theNewText;
   }
}

function setTheValue(elementID,theNewValue) {
   var elementExists = document.getElementById(elementID); // make sure element actually exists on page
   if( !elementExists) {}
   else {
      elementExists.value=theNewValue;
   }
}




// These functions hide and show elements on the form (at the "Box" level).

function hideAllFormElements() {
   // hide all elements, then show elements that each formula requires. It's cleaner than maintaining in separate scripts
   var len=fullInputList.length;
   var boxName="";
   for(i=0;i<len;i++) {
      boxName=fullInputList[i]+"Box";
      hideThisElement(boxName);
   }
}

function showTheseBoxElements(elementList) {
   var len=elementList.length;
   var boxName="";
   var i=0;
   for(i=0;i<len;i++) {
      boxName=elementList[i]+"Box";
      showThisElement(boxName);
   }
}



// shows pre or post text; previous function verifies element present 

function hideAllTextElements(preFix) {
   var len=fullToolList.length;
   var pName="";
   for(i=0;i<len;i++) {
      pName=preFix+fullToolList[i];
      hideThisElement(pName);
   }
}



// These are for validating inputs. NOTE: This section needs work!

function checkNumberInput(num) {  // num needs to resolve as a non-negative number, but at this point it's a string
   var out=true;
   // note that isNaN converts to number first, so it's a good test here
   if(isNaN(num) || num<0 || num.trim().length==0 ) { 
      out=false;
   }
   return out;
}

function checkInputs(aTool) {  // returns true for valid input, false for invalid
   var thisInputList = inputListsByTool[aTool];
   var len = thisInputList.length;
   var out=true;
   var checkNum;
   var aValue;
   for(i=0;i<len;i++) {
      aValue = document.getElementById(thisInputList[i]);
      if( !aValue) {
         out=false;  // if necessary element doesn't exist, calculation will be invalid
      }
      else {
         checkNum = checkNumberInput(aValue.value);
         if(checkNum===false) { out=false; }
      }
   }
   return out;
}



// This is for collecting input values. Note that it converts all text to numbers.

function getInputValues(thisTool) {
   clearInputObject();
   var isValid = checkInputs(thisTool);
   if( !isValid) { return false; }

   var inputList = inputListsByTool[thisTool];
   var len = inputList.length;
   for(i=0;i<len;i++) {
      inputObject[inputList[i]] = Number(document.getElementById(inputList[i]).value);
   }
   return true;
}






function runToolCalculation(thisTool) {
   var isValid = false;
   if(thisTool==="BMI") {
      isValid = findBMI(inputObject.feet, inputObject.inches, inputObject.pounds);
   }
   else if(thisTool==="HRR") {
      isValid = findHRRange(inputObject.age, 1);
   }
   else if(thisTool==="bodyFatFemale") {
      isValid = findBodyFatFemale(inputObject.waist, inputObject.hips, inputObject.feet, inputObject.inches, inputObject.age);
   }
   else if(thisTool==="bodyFatMale") {
      isValid = findBodyFatMale(inputObject.pounds, inputObject.iliac, inputObject.hips, inputObject.waist);
   }
   else if(thisTool==="WHR") {
      isValid = findWHR(inputObject.waist, inputObject.hips);
   }
   return isValid;

}


// These are for the individual tool calculations

function poundsToKilos(pounds){
   return pounds*.45359237;
}

function inchesToCentimeters(inches){
   return inches*2.54;
}

function findBMI(feet, inches, pounds) {
   var allInches = ((feet*12)+inches);
   if(allInches==0 || pounds==0) { return false; } // I'm using == rather than === to catch all possible errors
   var num = (703*pounds)/(allInches*allInches);
   answerObject.BMI = Math.round((num + 0.00001) * 100) / 100; // rounds to 2 decimal places
   return true;
}

function findHRMax(age){
   return 220-age;
}

function findHRR(HRMax, zone) {
   var minRate,maxRate;
   if(zone===1){
      minRate = Math.round(HRMax*.65);
      maxRate = Math.round(HRMax*.75);
   }
   else if(zone===2){
      minRate = Math.round(HRMax*.76);
      maxRate = Math.round(HRMax*.85);
   }
   else if(zone===3){
      minRate = Math.round(HRMax*.86);
      maxRate = Math.round(HRMax*.95);
   }
   else { minRate = 0; maxRate = 0;}
   return [minRate, maxRate];
}

function findHRRange(age) {
   if(age==0) {return false;}
   var HRMax = findHRMax(age);  //note this function only returns a number
   var HRRange = [0,0];
   answerObject.HRMax = HRMax;
   for(i=1;i<=3;i++) {
      HRRange = findHRR(HRMax,i);
      answerObject["HRR"+i] = HRRange;
   }
   return true;
}


function findBodyFatMale(weightLB, iliacIN, hipsIN, waistIN) {
   if( weightLB==0 || hipsIN==0 || iliacIN==0 || waistIN==0 ) {return false;}
   var BD=0; // body density
   var weight = poundsToKilos(weightLB);
   var iliac = inchesToCentimeters(iliacIN);
   var hips = inchesToCentimeters(hipsIN);
   var waist = inchesToCentimeters(waistIN);
   // NOTE: for body fat calcs, weight in kilograms, all lengths (including height) in centimeters
   BD = ( 1.21142 + (.00085*weight) - (.00050*iliac) - (.00061*hips) - (.00138*waist) );
   if(BD==0) { return false;}
   var BF = (495/BD)-450;
   answerObject.bodyFatMale = Math.round((BF + 0.00001) * 100) / 100; // rounds to 2 decimal places
   return true;
}

function findBodyFatFemale(waistIN, hipsIN, feet, inches, age) {
   if( waistIN==0 || hipsIN==0 || feet==0 || age==0 ) {return false;}
   var BD=0; // body density
   var waist = inchesToCentimeters(waistIN);
   var hips = inchesToCentimeters(hipsIN);
   var heightIN = feet*12 + inches;
   var height = inchesToCentimeters(heightIN);
   // NOTE: for body fat calcs, weight in kilograms, all lengths (including height) in centimeters
   BD = ( 1.168297 - (.002824*waist) + (.0000122098*waist*waist) - (.000733128*hips) + (.000510477*height) - (.000216161*age) );
   if(BD==0) { return false;}
   var BF = (495/BD)-450;
   answerObject.bodyFatFemale = Math.round((BF + 0.00001) * 100) / 100; // rounds to 2 decimal places
   return true;
}

function findWHR(waist, hips) {
   if(waist==0 || hips==0) {return false;}
   var num = waist/hips;
   answerObject.WHR = Math.round((num + 0.00001) * 100) / 100; // rounds to 2 decimal places
   return true;
}


// This is for displaying answers 

function writeAnswer(thisTool) {
   if(thisTool==="BMI") {
      setTheInnerHTML("myBMI",answerObject.BMI);
   }
   else if(thisTool==="HRR") {
      setTheInnerHTML("maxHR",answerObject.HRMax);
      setTheInnerHTML("minHR1",answerObject.HRR1[0]);
      setTheInnerHTML("maxHR1",answerObject.HRR1[1]);
      setTheInnerHTML("minHR2",answerObject.HRR2[0]);
      setTheInnerHTML("maxHR2",answerObject.HRR2[1]);
      setTheInnerHTML("minHR3",answerObject.HRR3[0]);
      setTheInnerHTML("maxHR3",answerObject.HRR3[1]);
   }
   else if(thisTool==="bodyFatMale") {
      setTheInnerHTML("myManFat",answerObject.bodyFatMale);
   }
   else if(thisTool==="bodyFatFemale") {
      setTheInnerHTML("myWomanFat",answerObject.bodyFatFemale);
   }
   else if(thisTool==="WHR") {
      setTheInnerHTML("myWHR",answerObject.WHR);
   }


}

// This finds left displacement for a marker bar, assumes we're aiming for the middle of a marker of markWidth width
// I left it pretty general so that I could re-use it for different width charts
// Assumes whole numbers for pixel values, chart increases left to right, no internal error checking in this function

function findMarkerLeftPix(myValue, markWidth, startChartPix, chartWidth, startChartVal, endChartVal) {
   var m = Math.round(markWidth/2);
   if(myValue <= startChartVal) {
      return startChartPix-m;
   }

   var pixelsPerUnit = chartWidth/(endChartVal - startChartVal);
   var fL = Math.round( (myValue - startChartVal )* pixelsPerUnit );
   var fromLeft = Math.round( (myValue - startChartVal )* pixelsPerUnit ) + startChartPix - m;
   return fromLeft;
}

function setMarkerLeftPix(elementID, myValue, markWidth, startChartPix, chartWidth, startChartVal, endChartVal) {
   var thisMarker = document.getElementById(elementID); // make sure element actually exists on page
   if( !thisMarker) { 
      return false;
   }

   var fromLeft = findMarkerLeftPix(myValue, markWidth, startChartPix, chartWidth, startChartVal, endChartVal);
   thisMarker.style.left = fromLeft + "px";
}

function setMyMarker(thisTool) {
   if(thisTool==="BMI") {
      setMarkerLeftPix("BMIMark", answerObject.BMI, 20, 50, 500, 17, 42);
   }
   else if(thisTool==="bodyFatMale") {
      setMarkerLeftPix("bodyFatMaleMark", answerObject.bodyFatMale, 20, 50, 500, 0, 100);
   }
   else if(thisTool==="bodyFatFemale") {
      setMarkerLeftPix("bodyFatFemaleMark", answerObject.bodyFatFemale, 20, 50, 500, 0, 100);
   }
}

/* 
var answerObject = {
   BMI: 0,
   HRMax: 0,
   HRR1: [0,0],
   HRR2: [0,0],
   HRR3: [0,0],
   bodyFatMale: 0,
   bodyFatFemale: 0,
   WHR: 0
}
*/




